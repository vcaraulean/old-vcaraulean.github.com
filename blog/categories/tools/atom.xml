<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | valeriu caraulean]]></title>
  <link href="http://caraulean.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://caraulean.com/"/>
  <updated>2013-03-08T23:23:44+01:00</updated>
  <id>http://caraulean.com/</id>
  <author>
    <name><![CDATA[Valeriu Caraulean]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[New & shiny Windows Azure: publishing a website using Git]]></title>
    <link href="http://caraulean.com/blog/2012/06/10/new-shiny-windows-azure-publishing-a-website-using-git/"/>
    <updated>2012-06-10T18:02:33+02:00</updated>
    <id>http://caraulean.com/blog/2012/06/10/new-shiny-windows-azure-publishing-a-website-using-git</id>
    <content type="html"><![CDATA[<p>After <a href="/blog/2012/06/08/new-shiny-windows-azure-taking-the-tour/">taking the tour</a> of Windows Azure, the first thing I wanted to try is the <a href="https://www.windowsazure.com/en-us/home/scenarios/web-sites/">Web Site hosting in Azure</a>. As Microsoft is offering a free trial for 90 days and a free extension to 12 months after the trial, you can host up to 10 small web sites for free for more than 1 year! With various options for publishing it makes Azure a no-brainer to host small personal sites and experimental stuff.</p>

<h3>Publishing a web site to Azure using Git</h3>

<p>Here are the steps required to configure &amp; publish your local repository to Azure.</p>

<h4>Configure Git publishing on Azure.</h4>

<p>It’s one time operation where you need to provide a username and password for your git repositories. You’ll be asked for it for it when you’ll try to configure Git for your first site.</p>

<h4>Create your web site in Azure</h4>

<p><img src="/../../../../../images/2012/azure-git-1.png" alt="alt screenshot" /></p>

<p>Provide a name for your site, then I’ll take few seconds to create an instance for it.</p>

<h4>Configure the Git repository for your site</h4>

<ul>
<li>Click on the name of your site to open it’s management console</li>
<li>Click on “Set up Git publishing”</li>
</ul>


<p><img src="/../../../../../images/2012/azure-git-2.png" alt="alt screenshot" /></p>

<p>In a few seconds your site will have a git repository provisioned.</p>

<h4>Add new remote to your local Git repository</h4>

<p>Open the folder with your local git repository in a command line/PowerShell window and type:</p>

<pre><code>git remote add azure https://vcaraulean@helloworld-test.scm.azurewebsites.net/helloworld-test.git
</code></pre>

<p>Here the “azure” is the name of your remote repository and the link is the address of your repository hosted in Azure.</p>

<h4>Push your website to newly added remote in Azure</h4>

<pre><code>git push azure master
</code></pre>

<p>In a few seconds your files will be published to Azure and your site will be available online.</p>

<p>As we see, <strong>configuration process is very straightforward</strong> and simple. After setting it up it takes<strong> one command to publish</strong> last version of your site to Azure and in a few seconds it will be available online.</p>

<hr />

<p>PS: Deploying a website/application using Git is far from being a ground breaking feature as many companies are allowing similar scenarios. Important is who does it – Microsoft. The revamped Azure with all his new features, ongoing involvements in Open Source, the new wave of Developer Tools shows clearly that Microsoft isn’t only serving to “The Enterprise” but also listening carefully to latest tech &amp; software development trends. And even his moves aren’t really innovative, keeping up with new stuff and improving constantly the old products it’s a very good strategy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New & shiny Windows Azure: taking the Tour]]></title>
    <link href="http://caraulean.com/blog/2012/06/08/new-shiny-windows-azure-taking-the-tour/"/>
    <updated>2012-06-08T20:00:00+02:00</updated>
    <id>http://caraulean.com/blog/2012/06/08/new-shiny-windows-azure-taking-the-tour</id>
    <content type="html"><![CDATA[<p>How there is a lot of buzz in last few days about <a href="http://windowsazure.com">revamped Windows Azure</a>, I cannot resist anymore and I’m giving it a try.</p>

<p>I’ve read few blog posts about new features, Metro style UI &amp; improved tooling. But I was surprised by what I have seen when I logged in and tried to open the “Manage” part: the<strong> Windows Azure Tour</strong> application.</p>

<p><img src="/../../../../../images/2012/azure-tour-1.png" alt="alt screenshot" /></p>

<p>Instead of throwing the newcomer directly into Management panel, it offers you to take a tour and get some concepts of application and how to interact with it.</p>

<p>The idea itself is not new. <a href="http://en.wikipedia.org/wiki/Office_Assistant">Clippy the Office Assistant</a> is the (annoying) forgotten hero born to help people dig into Office applications. More often other companies are offering a video introduction for their products or a series of “text + screenshots” slides to quickly explain usage of the product to new users.</p>

<p>The approach Microsoft took with Windows Azure Tour is a bit different:</p>

<ul>
<li>It runs “within” application itself, giving impression of having the main application in background</li>
<li>It gradually exposes application’s features in the same window</li>
<li>Features are shown in exact same place where they are in application</li>
<li>It looks &amp; works great</li>
</ul>


<p>And I quite like their Wizard-like walkthrough dialog. Smooth and subtle animations, clear visual indication of steps and current position, a bold exposure of Metro/Windows 8 style. I’m very tempted to try reproduce it in XAML...</p>

<p>Few more screenshots:</p>

<p><img src="/../../../../../images/2012/azure-tour-2.png" alt="alt screenshot" /></p>

<p><img src="/../../../../../images/2012/azure-tour-3.png" alt="alt screenshot" /></p>

<p>Finishing the Tour will take you to the main application screen:</p>

<p><img src="/../../../../../images/2012/azure-tour-4.png" alt="alt screenshot" /></p>

<p>That’s just my first impression about Azure. And most often is the one that counts the most. I think Microsoft have done a great job for presenting the new Azure. Let’s see now how it will be in real usage...</p>

<p>PS: If you haven’t seen the previous Azure portal, here is a screenshot:</p>

<p><img src="/../../../../../images/2012/azure-tour-5.png" alt="alt screenshot" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Greatest feature of TortoiseHg and GitHub for Windows is still missing it]]></title>
    <link href="http://caraulean.com/blog/2012/05/30/greatest-feature-of-tortoisehg-and-github-for-windows-is-missing-it-so-far/"/>
    <updated>2012-05-30T18:20:30+02:00</updated>
    <id>http://caraulean.com/blog/2012/05/30/greatest-feature-of-tortoisehg-and-github-for-windows-is-missing-it-so-far</id>
    <content type="html"><![CDATA[<p><a href="http://windows.github.com/">GitHub for Windows</a> was released recently and it’s a huge advancement in usability of <a href="http://git-scm.com/">Git SCM</a> in Windows. Until not so far existent tooling has been giving you the command line integration and hopefully some (crappy) basic UI . <a href="http://code.google.com/p/gitextensions/">Git Extensions</a> has made lately great progress but I still preferred the command line for routine tasks.</p>

<p>This lack of good tooling around Git was the reason why I’ve promoted Mercurial in my company when we’ve migrated some of our projects to DVCS. <a href="http://tortoisehg.bitbucket.org/">TortoiseHg</a> is great for working with Mercurial repositories and is evolving steadily adding new features &amp; improving stability.</p>

<p>There is one killer feature that I absolutely love in TortoiseHg and I’m using it daily. I do most of source-control operations from the command line/PowerShell. But whenever I want I can launch the TortoiseHg’s UI using simple commands that would bring me right where I need to:</p>

<ul>
<li><strong>thg</strong> or <strong>thg log</strong>: the log window</li>
<li><strong>thg ci</strong>: commit dialog</li>
<li><strong>thg shelve</strong>: shelve dialog</li>
</ul>


<p>So, with a couple of keystrokes I can launch (almost any) dialog for a Mercurial repository in current folder, do quickly the job and close it away to be back to my lovely Console. That’s a true time saver and integrates very well in my workflow.</p>

<p>This is the feature I miss in GitHub for Windows: launch it from command line, accept command line parameters and show me the screen I’ve asked for. Isn’t it a great idea?</p>

<p>Probably it’s not easy to add this feature as for now GHfW is deployed using ClickOnce and it has enough quirks and limitations. But who knows what the future brings...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TortoiseHG and JIRA integration - the lightweight option]]></title>
    <link href="http://caraulean.com/blog/2011/09/09/tortoisehg-and-jira-integrationthe-lightweight-option/"/>
    <updated>2011-09-09T12:29:08+02:00</updated>
    <id>http://caraulean.com/blog/2011/09/09/tortoisehg-and-jira-integrationthe-lightweight-option</id>
    <content type="html"><![CDATA[<p>You can integrate JIRA and TortoiseHG Workbench at two levels:</p>

<ul>
<li>Only highlight the issue in your revision details and allow quickly open it in browser</li>
<li>Connect to your JIRA and show the list of issues with all filters, view details and pick issues to include in your commit.</li>
</ul>


<p>Now we’ll focus on the easiest option to implement – displaying issue number in commit message and open it in browser.</p>

<p>Required settings:</p>

<ul>
<li>Open <strong>Issue Tracking</strong> category in Settings dialog of TortoiseHG</li>
<li>Set properties to

<ul>
<li><strong>Issue Regex</strong>: \b\w{3,7}-\d+\b</li>
<li><strong>Issue Link</strong>: <a href="http://your.jira.server.com:8080/browse/{0}">http://your.jira.server.com:8080/browse/{0}</a></li>
</ul>
</li>
<li>Ignore the rest of settings for now</li>
</ul>


<p>See the screenshot, it should look like this:</p>

<p><img src="/../../../../../images/2011/tortoisehg-jira-1.png" alt="alt screenshot" /></p>

<p>Now if your commit message in revision details will contain a code of an Issue (or what will be detected as code) it will be highlighted as a hyperlink and clicking it will open a browser with your Issue details in JIRA.</p>

<p><img src="/../../../../../images/2011/tortoisehg-jira-2.png" alt="alt screenshot" /></p>

<p>I’m trying to get a deeper integration working, unsuccessfully so far. When it will be done will publish a follow-up post...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integration of Caliburn.Micro and Telerik's Silverlight controls]]></title>
    <link href="http://caraulean.com/blog/2011/06/05/integration-of-caliburn-micro-and-teleriks-silverlight-controls/"/>
    <updated>2011-06-05T22:51:45+02:00</updated>
    <id>http://caraulean.com/blog/2011/06/05/integration-of-caliburn-micro-and-teleriks-silverlight-controls</id>
    <content type="html"><![CDATA[<p>I’ve wrote already about how to <a href="/blog/2010/12/11/teleriks-radtabcontrol-and-caliburn-micro/">use Telerik’s RadTabControl with Caliburn.Micro</a> and profit from Caliburn’s conventions. That post is still getting considerable attention in my blog and also there are people are asking in Caliburn’s discussion list about such kind of integration. So, I’ve decided to spend some of my time and provide a more coherent experience in this domain. Rob Eisenberg <a href="http://caliburnmicro.codeplex.com/discussions/256418">suggested to create a dedicated project</a> for it and, why not, to create a NuGet package. That sounded very interesting for me as it would allow me to scratch another itch – the <a href="http://nuget.org">NuGet</a> package manager. We’ve been using it in our projects with great success but I have never explored the part with creation and publication of packages.</p>

<h3>How do you get it</h3>

<p><a href="https://github.com/vcaraulean/Caliburn.Micro.Telerik">Caliburn.Micro.Telerik source code on GitHub</a>. Feel free to pull the code &amp; use only parts you need. There are two main classes, you can copy&amp;paste them in your projects. If you want to contribute, I’d appreciate a push request with new conventions, better code samples or bug fixes. Report issues if you’ve found any...</p>

<p><a href="http://nuget.org/List/Packages/Caliburn.Micro.Telerik">Caliburn.Micro.Telerik as a NuGet package</a>. “Add Library Package Reference ...” from Visual Studio &amp; start using it. My package has a dependency on Caliburn.Micro.1.1.0 so you can just reference it and Caliburn will be pulled in automatically.</p>

<h3>What’s in</h3>

<p>First of all, <strong>conventions</strong>. I’ve put inside conventions we’ve been using in our projects and plan to add more. So far there are conventions for:</p>

<ul>
<li>RadTabControl</li>
<li>RadBusyIndicator</li>
<li>RadDateTimePicker (affects also RadTimePicker and RadDatePicker)</li>
</ul>


<p>Then you have a basic <strong>implementation of IWindowManager</strong>, the RadWindowManager class. Nothing fancy, pretty basic stuff. And I plan to extend it to offer also an unified interface to Telerik’s custom dialogs like Confirm, Alert and Prompt.</p>

<p>And third, there are <strong>two sample projects</strong>, one showing how to use conventions and other makes use of RadWindowManager.</p>

<h3>How to use conventions</h3>

<p>Add a line in your Bootstrapper’s Configure() method to enable conventions:</p>

<pre><code>public class AppBootstrapper : Bootstrapper&lt;IShell&gt;
{      
    protected override voidConfigure() {
    // ...

        TelerikConventions.Install();
    }
}
</code></pre>

<p>Check it out and let me know if you found it useful or how it’s possible to make it better...</p>
]]></content>
  </entry>
  
</feed>
