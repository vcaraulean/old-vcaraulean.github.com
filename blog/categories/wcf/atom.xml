<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: wcf | valeriu caraulean]]></title>
  <link href="http://caraulean.com/blog/categories/wcf/atom.xml" rel="self"/>
  <link href="http://caraulean.com/"/>
  <updated>2013-09-19T22:51:49+02:00</updated>
  <id>http://caraulean.com/</id>
  <author>
    <name><![CDATA[Valeriu Caraulean]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using WCF without configuration files]]></title>
    <link href="http://caraulean.com/blog/2011/11/16/using-wcf-without-configuration-files/"/>
    <updated>2011-11-16T01:14:59+01:00</updated>
    <id>http://caraulean.com/blog/2011/11/16/using-wcf-without-configuration-files</id>
    <content type="html"><![CDATA[<p>I have recently published new project on GitHub, <a href="http://github.com/vcaraulean/WcfWithoutConfigFile">WcfWithoutConfigFile</a>. This post is intended as a ‘readme’ file for this repository.</p>

<p>It’s just a collection of simple projects that I’ve put together when a coworker asked me to show how he can use WCF without configuration files. He got feed up working with XML in web.config and wanted a cleaner and more understandable way to configure Windows Communication Foundation.</p>

<p>What’s in:</p>

<ul>
<li>How to use WCF in your unit tests (<a href="http://github.com/vcaraulean/WcfWithoutConfigFile/tree/master/WcfWithoutConfigFile.Tests">WcfWithoutConfigFile.Tests</a> project). Sometimes you want to get your code tested at service boundaries and you want to involve also WCF. It contains, among a simple unit test, a base class for your tests so the test cases are clean and don’t contain plumbing code.</li>
<li>Hosting WCF services in IIS (<a href="http://github.com/vcaraulean/WcfWithoutConfigFile/tree/master/WcfWithoutConfigFile.WebHost">WcfWithoutConfigFile.WebHost</a> project). Defining the service in .svc files and all required infrastructure to instantiate the service via code-only configuration.</li>
<li><strong>My favorite</strong> – hosting WCF service in IIS using Castle’s <a href="http://www.castleproject.org/container/facilities/trunk/wcf/index.html">WcfIntegration facility</a> (<a href="https://github.com/vcaraulean/WcfWithoutConfigFile/tree/master/WcfWithoutConfigFile.WebHost.Castle">WcfWithoutConfigFile.WebHost.Castle</a> project). It leverages Castle Windsor container and WcfFacility to easily host/run/consume your WCF services. It also configures the service to use Windows authentication and shows how to retrieve client’s WindowsIdentity in the service. There is also a client project, <a href="https://github.com/vcaraulean/WcfWithoutConfigFile/tree/master/WcfWithoutConfigFile.WebHost.Castle-Client">WcfWithoutConfigFile.WebHost.Castle-Client</a> that connects to service and does some operations.</li>
</ul>


<p><a href="https://github.com/vcaraulean/WcfWithoutConfigFile/tree/master/WcfWithoutConfigFile.WebHost.Castle">WcfWithoutConfigFile.WebHost.Castle</a> requires some configuration to get it working properly. Be sure to:</p>

<ul>
<li>Run it in IIS Express</li>
<li>Enable Windows Authentication in project properties</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WCF Security Guidance]]></title>
    <link href="http://caraulean.com/blog/2008/03/28/wcf-security-guidance/"/>
    <updated>2008-03-28T10:44:31+01:00</updated>
    <id>http://caraulean.com/blog/2008/03/28/wcf-security-guidance</id>
    <content type="html"><![CDATA[<p>It seems to be that Patterns &amp; Practices team continues to do what they do the best - creating guidance within different development areas.</p>

<p>The last release of this group is the <a href="http://www.codeplex.com/WCFSecurity/">WCF Security Guidance</a>. It contains description for a few application scenarios &amp; a list of various How-Tos, including few video walkthroughs of common WCF solutions.</p>

<p>It's different from usual way to dig into WCF infrastructure details. It's not crawling over hundreds of MSDN pages, it's not like reading MSDN samples trying to understand what's going on.</p>

<p>It is a very detailed step-by-step description on how to do some tasks touching different aspects of WCF, starting from opening a certificates store, and ending with deployment advices.</p>

<p>Keep it going, P&amp;P!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HttpContext idiom for Windows Communication Foundation.]]></title>
    <link href="http://caraulean.com/blog/2008/02/13/httpcontext-idiom-for-windows-communication-foundation/"/>
    <updated>2008-02-13T15:13:37+01:00</updated>
    <id>http://caraulean.com/blog/2008/02/13/httpcontext-idiom-for-windows-communication-foundation</id>
    <content type="html"><![CDATA[<p>WCF infrastructure allows you to store context sensitive data in InstanceContext of the service instance. For that you should implement from IExtension<InstanceContext> and plug that class into WCF's infrastructure in any of available ways.</p>

<p>When I worked on a class that can store contextual information in Web context or WCF context depending on some configuration parameters, I preferred to have similar idioms, and I wrote an HttpContext-like class for WCF.</p>

<pre><code>///&lt;summary&gt;
/// This class incapsulates context information for a service instance
///&lt;/summary&gt;
public class WcfInstanceContext : IExtension&lt;InstanceContext&gt;
{
    private readonly IDictionary items;

    private WcfInstanceContext()
    {
        items = new Hashtable();
    }

    ///&lt;summary&gt;
    /// &lt;see cref="IDictionary"/&gt; stored in current instance context.
    ///&lt;/summary&gt;
    public IDictionary Items
    {
        get { return items; }
    }

    ///&lt;summary&gt;
    /// Gets the current instance of &lt;see cref="WcfInstanceContext"/&gt;
    ///&lt;/summary&gt;
    public static WcfInstanceContext Current
    {
        get
        {
            WcfInstanceContext context = OperationContext.Current.InstanceContext.Extensions.Find&lt;WcfInstanceContext&gt;();
            if (context == null)
            {
                context = new WcfInstanceContext();
                OperationContext.Current.InstanceContext.Extensions.Add(context);
            }
            return context;
        }
    }

    /// &lt;summary&gt;
    /// &lt;see cref="IExtension{T}"/&gt; Attach() method
    /// &lt;/summary&gt;
    public void Attach(InstanceContext owner) { }

    /// &lt;summary&gt;
    /// &lt;see cref="IExtension{T}"/&gt; Detach() method
    /// &lt;/summary&gt;
    public void Detach(InstanceContext owner) { }
}
</code></pre>

<p>Now, you can use this class to store and retrieve data in the same manner as you're working with HttpContext:</p>

<pre><code>WcfInstanceContext.Current.Items["key"] = new MyClass();
MyClass myClass = WcfInstanceContext.Current.Items["key"] as MyClass;
</code></pre>

<p>Of course, when doing this you should be inside of WCF session...</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
</feed>
