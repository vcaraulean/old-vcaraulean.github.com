<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: community | valeriu caraulean]]></title>
  <link href="http://caraulean.com/blog/categories/community/atom.xml" rel="self"/>
  <link href="http://caraulean.com/"/>
  <updated>2013-08-07T15:32:00+03:00</updated>
  <id>http://caraulean.com/</id>
  <author>
    <name><![CDATA[Valeriu Caraulean]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integration of Caliburn.Micro and Telerik's Silverlight controls]]></title>
    <link href="http://caraulean.com/blog/2011/06/05/integration-of-caliburn-micro-and-teleriks-silverlight-controls/"/>
    <updated>2011-06-05T23:51:45+03:00</updated>
    <id>http://caraulean.com/blog/2011/06/05/integration-of-caliburn-micro-and-teleriks-silverlight-controls</id>
    <content type="html"><![CDATA[<p>I’ve wrote already about how to <a href="/blog/2010/12/11/teleriks-radtabcontrol-and-caliburn-micro/">use Telerik’s RadTabControl with Caliburn.Micro</a> and profit from Caliburn’s conventions. That post is still getting considerable attention in my blog and also there are people are asking in Caliburn’s discussion list about such kind of integration. So, I’ve decided to spend some of my time and provide a more coherent experience in this domain. Rob Eisenberg <a href="http://caliburnmicro.codeplex.com/discussions/256418">suggested to create a dedicated project</a> for it and, why not, to create a NuGet package. That sounded very interesting for me as it would allow me to scratch another itch – the <a href="http://nuget.org">NuGet</a> package manager. We’ve been using it in our projects with great success but I have never explored the part with creation and publication of packages.</p>

<h3>How do you get it</h3>

<p><a href="https://github.com/vcaraulean/Caliburn.Micro.Telerik">Caliburn.Micro.Telerik source code on GitHub</a>. Feel free to pull the code &amp; use only parts you need. There are two main classes, you can copy&amp;paste them in your projects. If you want to contribute, I’d appreciate a push request with new conventions, better code samples or bug fixes. Report issues if you’ve found any...</p>

<p><a href="http://nuget.org/List/Packages/Caliburn.Micro.Telerik">Caliburn.Micro.Telerik as a NuGet package</a>. “Add Library Package Reference ...” from Visual Studio &amp; start using it. My package has a dependency on Caliburn.Micro.1.1.0 so you can just reference it and Caliburn will be pulled in automatically.</p>

<h3>What’s in</h3>

<p>First of all, <strong>conventions</strong>. I’ve put inside conventions we’ve been using in our projects and plan to add more. So far there are conventions for:</p>

<ul>
<li>RadTabControl</li>
<li>RadBusyIndicator</li>
<li>RadDateTimePicker (affects also RadTimePicker and RadDatePicker)</li>
</ul>


<p>Then you have a basic <strong>implementation of IWindowManager</strong>, the RadWindowManager class. Nothing fancy, pretty basic stuff. And I plan to extend it to offer also an unified interface to Telerik’s custom dialogs like Confirm, Alert and Prompt.</p>

<p>And third, there are <strong>two sample projects</strong>, one showing how to use conventions and other makes use of RadWindowManager.</p>

<h3>How to use conventions</h3>

<p>Add a line in your Bootstrapper’s Configure() method to enable conventions:</p>

<pre><code>public class AppBootstrapper : Bootstrapper&lt;IShell&gt;
{      
    protected override voidConfigure() {
    // ...

        TelerikConventions.Install();
    }
}
</code></pre>

<p>Check it out and let me know if you found it useful or how it’s possible to make it better...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The best User Group meeting I've attended so far - Geneva JUG on Scala & Akka]]></title>
    <link href="http://caraulean.com/blog/2011/01/18/the-best-user-group-meeting-ive-attended-so-far-geneva-jug-on-scala-akka/"/>
    <updated>2011-01-18T02:47:02+02:00</updated>
    <id>http://caraulean.com/blog/2011/01/18/the-best-user-group-meeting-ive-attended-so-far-geneva-jug-on-scala-akka</id>
    <content type="html"><![CDATA[<p>Today’s meeting of <a href="http://genevajug.ch/">Geneva JUG</a> was the most entertaining User Group meeting I’ve attended. Excellent speakers, great topics, mind-blowing ideas...</p>

<p>Iulian Dragos had an introductory talk about Scala. This isn’t <a href="/blog/2010/01/31/have-been-in-the-aliens-camp-twice/">my first meeting with Scala</a>, but today I’ve “got it” a bit more. Not at the level to wiling to use it and start writing apps, but I’ve understood some ideas and concepts behind it. For me it sometimes looked like C# with all the <em>language noise</em> stripped down as it has some language constructs very similar with dynamics, vars and functions in C#. And also it remembered me a bit about Boo, a strongly-typed language based on .NET runtime. Nice language with interesting features that failed to get enough traction in .NET world.</p>

<p>Oh, and then was the Jonas Bonèr, talking about Akka. What a great talk. As I’ve been diving deeper last weeks in distributed systems (and using NServiceBus to get some parts of architecture right) it was a real eye opener. Jonas was talking about three main problems in distributed world – scalability, fault-tolerance and remote interactions. Those concepts are pretty platform agnostic. But for me, living mostly in .NET word, it was very entertaining to see how things are implementing using other language on a different platform. Jonas, like a magician, where pulling from pockets akka pieces and concepts – one greater that another. And I should admit it’s something I’ve never seen in .NET. Scala’s flexibility and extensibility allows getting really complex things wrapped in a clean syntax and simple flow. Things like new async syntax in C# 5 are looking now as badly put shortcuts and “not so sweet” syntactic sugar when compared to what Scala has to offer.</p>

<p>And a big thanks to organizers of this session. Keep up rolling, guys...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Had a good evening yesterday at Geneva JUG...]]></title>
    <link href="http://caraulean.com/blog/2010/12/01/had-a-good-evening-yesterday-at-geneva-jug/"/>
    <updated>2010-12-01T14:08:19+02:00</updated>
    <id>http://caraulean.com/blog/2010/12/01/had-a-good-evening-yesterday-at-geneva-jug</id>
    <content type="html"><![CDATA[<p>The session was truly entertaining. David Gageot (<a href="http://twitter.com/#!/dgageot">@dgageot</a>) talked about Git and Mockito.</p>

<p>The talk about Git was interesting. I’m using already DVCS (Git grace to GitHub and Mercurial because of better Windows experience) but I’m very far from being an advanced Git user. Learnt few tweaks, both for Git and for presenting. It was interesting to see how David started presentation about git by showing an advanced feature, bisecting, for an auditory that was for most not familiar with DVCS and Git. Also enjoyed looking at reactions when you’re showing them how they can be more productive. I’ve seen people being very impressed, asking questions. But also seen reactions like “subversion is simpler” to “I enjoy a coffee while updating my working copy with svn". And (a true horror story, it’s almost 2011) some people are still using CVS.</p>

<p>Then there was an intro to Mockito, a mocking framework for Java. It is very similar by idea and syntax to Rhino.Mocks and Moq from .NET world. Just, a Java penalty, mocks a little bit more verbose when compared with C#. And, surprise, no XML during whole presentation. Kidding :)</p>

<p>It's very interesting to listen to David. Really passionate about software development, productivity and best practices...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mGitHub Sample Application. Using Caliburn.Micro to build Windows Phone 7 applications]]></title>
    <link href="http://caraulean.com/blog/2010/11/29/mgithub-sample-application-using-caliburn-micro-to-build-windows-phone-7-applications/"/>
    <updated>2010-11-29T00:37:11+02:00</updated>
    <id>http://caraulean.com/blog/2010/11/29/mgithub-sample-application-using-caliburn-micro-to-build-windows-phone-7-applications</id>
    <content type="html"><![CDATA[<h4><a href="https://github.com/vcaraulean/mGitHub.SampleApp">mGitHub.SampleApp on GitHub</a></h4>

<h4><a href="http://gitstation.com">mGitHub - the real app - is available in Marketplace</a></h4>

<h4>The story</h4>

<p>I’ve been very excited when Microsoft announced a new &amp; shiny mobile platform, the Windows Phone 7. Mostly because it gave me the chance to explore new things using very familiar tools: Visual Studio 2010, C# and Silverlight. I never had enough time to start digging in this area. When I’ve read that Rob Eisenberg announced a <a href="http://devlicio.us/blogs/rob_eisenberg/archive/2010/11/02/caliburn-micro-contest.aspx">Caliburn.Micro contest</a> and having lost the passion for doing my job at company I’m working now, I’ve decided to participate.</p>

<p>I’ve decided to go with an interesting idea - writing a WP7 app to work with <a href="http://github.com/">GitHub</a>. Mainly because I’m sure that I will use such app myself. GitHub is an awesome service that lets you host and collaborate on your projects freely once they are open source or if you want private projects you can have it too for a fee. I like idea and this sample application so much, the whole development process went so smooth and easy so that I’ve decided, along with participation in CM contest and publishing sources of my sample app on GitHub, to continue developing it by adding more features to offer a complete and user friendly application to work with GitHub (later about this).</p>

<h4>The app</h4>

<p><strong>mGitHub.SampleApp</strong> allows to browse few preselected projects and repositories on GitHub. You can see user/repository details, navigate trough user’s own repositories, watched repositories, view contributors and so on...</p>

<p>The use of Caliburn.Micro, which is (not only) a MVVM framework, implies that application is View Model driven. Main screen is baked by a view model, then everything else - application flow, user interactions, service calls are done within View Model classes (with few small inclusions of WP7 navigation model, view based).</p>

<p>WP7 controls like <strong>Panorama </strong>and <strong>Pivot</strong> were also used with MVVM in mind. For example, here is the code for main View Model that is serving a Panorama-based view:</p>

<pre><code>public class MainPageViewModel : Screen {
    public MainPageViewModel(MostViewedViewModel mostViewed,
                             FavoritesViewModel favorites,
                             AboutViewModel about)
    {
        MostViewed = mostViewed;
        Favorites = favorites;
        About = about;
    }

    public FavoritesViewModel Favorites { get; protected set; }
    public MostViewedViewModel MostViewed { get; protected set; }
    public AboutViewModel About { get; protected set; }
}
</code></pre>

<p>So, here we’re just injecting our View Models for individual Panorama pages in MainPageViewModel and then <a href="http://caliburnmicro.codeplex.com/wikipage?title=SimpleContainer&amp;referringTitle=Documentation">SimpleContainer</a> takes care to provide required instances. Since in a Panorama control all pages are visible (active), we’re using a simple Screen (from CM) as our base class for our VM. Then, this is how the panorama view is defined:</p>

<pre><code>&lt;controls:Panorama Title="mGitHub sample app "&gt; 
    &lt;controls:Panorama.Background&gt; 
        &lt;ImageBrush ImageSource="PanoramaBackground.jpg"/&gt; 
    &lt;/controls:Panorama.Background&gt; 
    &lt;controls:PanoramaItem x:Name="Favorites" Header="my favorites" /&gt; 
    &lt;controls:PanoramaItem x:Name="MostViewed" Header="interesting" /&gt; 
    &lt;controls:PanoramaItem x:Name="About" Header="about" /&gt; 
&lt;/controls:Panorama&gt;
</code></pre>

<p>It’s nice and clean, with very good separation of concerns: each panorama page has it’s own View and a corresponding View Model. The work to glue it together is done by Caliburn.</p>

<p>The Pivot is a bit different. This control is basically a well known TabControl, it has headers and only one item is active at a time. For a PivotViewModel we’ll use a Conductor class with one active item:</p>

<pre><code>[SurviveTombstone]
public class PivotViewModel : Conductor&lt;IScreen&gt;.Collection.OneActive {
}
</code></pre>

<p>Then the two application Pivots, UserPivotViewModel and RepositoryPivotViewModel will just ask from container the view models of individual pages and add them to Items collection of Conductor class:</p>

<pre><code>[SurviveTombstone]
public class UserPivotViewModel : PivotViewModel {
    private readonly UserDetailsViewModel details;
    private readonly UserRepositoriesViewModel repositoriesViewModel;
    private readonly UserWatchingViewModel watchingViewModel;

    public UserPivotViewModel(UserDetailsViewModel details,
                              UserRepositoriesViewModel repositoriesViewModel,
                              UserWatchingViewModel watchingViewModel)
    {
        this.details = details;
        this.repositoriesViewModel = repositoriesViewModel;
        this.watchingViewModel = watchingViewModel;
    }
    protected override void OnInitialize()
    {
        base.OnInitialize();

        Items.Add(details);
        Items.Add(repositoriesViewModel);
        Items.Add(watchingViewModel);

        ActivateItem(details);
    }
</code></pre>

<p>The view, again, is very simple, grace of Caliburn.Micro magic:</p>

<pre><code>&lt;controls:Pivot x:Name="Items" Title="{Binding PivotTitle}" SelectedItem="{Binding ActiveItem, Mode=TwoWay}"&gt; 
    &lt;controls:Pivot.HeaderTemplate&gt; 
        &lt;DataTemplate&gt; 
            &lt;TextBlock Text="{Binding DisplayName}" /&gt; 
        &lt;/DataTemplate&gt; 
    &lt;/controls:Pivot.HeaderTemplate&gt; 
&lt;/controls:Pivot&gt;
</code></pre>

<p>That’s why I enjoy using this framework, it makes some development tasks extremely simple.</p>

<p>Also, application make use of INavigationService,  wrapper API for Launchers/Choosers and is aware of Thombstoning. I tried to keepcode small enough to be easily followed and read, so it will not be too hard to find those places in project’s source code…</p>

<p>Another (probably interesting) piece of code in this project is communication with GitHub using their API. It’s not exactly the IGitHubHost service that I want to highlight, it’s pretty trivial. Take a look at two wrappers around RequestProcessor class, both added in order to improve User Experience when working with mGitHub.SampleApp on the phone:</p>

<ul>
<li>ProgressAwareRequestProcessor – will show a view with <a href="http://www.jeff.wilcox.name/2010/11/smooth-loading-performanceprogressbar/">PerformanceProgressBar</a> during <strong>any</strong> remote call</li>
<li>CachingRequestProcessor – providing a extremely simplistic <strong>data cache</strong>, storing requests and their results</li>
</ul>


<p>These wrappers are registered in container and View Models even don’t know about their abilities, for them it’s just issuing a call and displaying a result. Separation of concerns is always good principle to follow...</p>

<h4>Screenshots</h4>

<p>Few screenshots, to get the sense of how UI looks like:</p>

<p><img src="/../../../../../images/2010/mgithub-1.png" alt="alt mgithub" />
<img src="/../../../../../images/2010/mgithub-2.png" alt="alt mgithub" />
<img src="/../../../../../images/2010/mgithub-3.png" alt="alt mgithub" />
<img src="/../../../../../images/2010/mgithub-4.png" alt="alt mgithub" /></p>

<h4>Final notes</h4>

<p>This application surely contains bugs, it probably has few strange design decisions and graphics are done by professional developer (me). But <strong>it works</strong>. It serves it’s main purpose to show how you can write an application for Windows Phone 7 using Caliburn.Micro. And I had a lot of fun working on it...</p>

<p>I’ll surely improve this sample, fix reported bugs and will listen carefully to improvement ideas. So, <strong>any</strong> <strong>feedback is welcome</strong>.</p>

<p>But in the meantime, I’m doing everything possible to release a real application to Marketplace that will be called <strong>mGitHub</strong> and will offer essentially <strong>improved experience and more features</strong>. So, if you like the idea, if you like GitHub and will most likely use the app on your phone, I would be glad to hear from you. Next time when I’ll be planning features your feedback will be considered.</p>

<p>This application weren’t tested on a real phone. I’m counting the hours until my hands will get the ordered Samsung Omnia 7 and I’ll be testing this app on real hardware. If everything goes well, expect yearly next week a feedback (and probably fixes &amp; improvements) after using the app on WP7 device.</p>

<p>Code of this application is licensed under MIT license and <a href="https://github.com/vcaraulean/mGitHub.SampleApp">available on GitHub</a>.</p>

<h4>Credits</h4>

<p>Thanks to:</p>

<ul>
<li>Rob Eisenberg and Christopher Bennage for <a href="http://caliburnmicro.codeplex.com/">Caliburn.Micro</a></li>
<li><a href="http://www.jeff.wilcox.name/">Jeff Wilcox</a> for PerformanceProgressBar</li>
<li><a href="http://www.sxc.hu/photo/1271413">Panorama background image</a> by cobrasoft</li>
</ul>


<p>Special thanks to:</p>

<ul>
<li>my friend Dumitru Cantemir for helping me with some code.</li>
<li>my daughter, for letting her dad working on this app. Even if sometimes it was...</li>
</ul>


<p><img src="/../../../../../images/2010/dadatwork.jpg" alt="alt dad at work" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flirting with Java community]]></title>
    <link href="http://caraulean.com/blog/2010/09/29/flirting-with-java-community/"/>
    <updated>2010-09-29T15:16:00+03:00</updated>
    <id>http://caraulean.com/blog/2010/09/29/flirting-with-java-community</id>
    <content type="html"><![CDATA[<p>Despite my <a href="/blog/2009/11/26/alt-net-swiss-community-its-running/">enthusiasm about finding and participating</a> in a regional .NET user group, the <a href="http://www.altnetfr.org/lausanne/">Alt.NET Suisse</a> haven’t got enough traction to keep on rolling and now it’s actually not functioning.</p>

<p>So, to keep my community-and-knowledge-hungry spirit quiet, I <a href="/blog/2010/01/31/have-been-in-the-aliens-camp-twice/">keep visiting regional Java User Groups</a>. The last two session I’ve took part where on some emerging topics, not strictly related to Java. For me, a .NET developer, that is a ticket to visit these meetings.</p>

<p>The “<strong>Not only SQL (NoSQL)</strong>” session at <a href="http://jugl.ch/">JUG Lausanne</a> on September 9, was interesting not by presentation about NoSQL and the hype around it, but by half-way discussion that hijacked permanently the presentation. But at the end, it was not a bad thing. It was very interesting to hear how people are planning to use or already using NoSQL in real world projects.</p>

<p>“<strong>Hibernate – strategies for caching and data loading</strong>” was yesterday at <a href="http://www.genevajug.ch/">JUG Geneve</a>. The topic was somewhat familiar for me, as we’re using extensively <a href="http://nhforge.org">NHibernate</a> in our projects. Initially, NHibernate was a .NET port of popular Java ORM – Hibernate. They are still very similar in concepts, features and scope, but I do see that NHibernate got new features that were not ported from his big brother. Linq provider, Futures, fluent/code mapping are first that are coming in my mind.</p>

<p>Few random thoughts and impressions after the session:</p>

<ul>
<li>nothing new for me, but a good recapitulation of options available to improve performance of your data layer</li>
<li>I do like C# over Java as a general purpose programming language. It’s easier to read, laconic and just cleaner when compared to Java</li>
<li>are the Java guys really struck into XML? I’ve seen yesterday more XML than in whole last few months</li>
<li>Alain Helaili, the presenter, used dynaTrace to show how various tweaks are affecting performance in test cases. It’s a kind of instrumentation framework for Java that has an integration point with Hibernate. Functionality is in some parts similar to latest improvements in Visual Studio 2010, IntelliTrace debugging. And it’s a typical example of “developer oriented interface” with all corresponding usability quirks</li>
</ul>


<p>Overall, I’m very pleased meeting Java community. Looking forward to next sessions that are not too java-centric to make interest for a mere .NET Developer.</p>
]]></content>
  </entry>
  
</feed>
